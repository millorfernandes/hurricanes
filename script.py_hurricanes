# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}


damages_float = []
# print(int("1M".replace("M", ""))*1000000)

def convert_mb_to_float(lista):
  for item in lista:
    if item == "Damages not recorded":
      damages_float.append(item)
    elif "M" in item:
      damages_float.append(float(item.replace("M", ""))*1000000.0)
    else:
      damages_float.append(float(item.replace("B", ""))*1000000000.0)
  return print("Conversion done!")

convert_mb_to_float(damages)


print(len(names))

# create empty dictionary
hurricanes_by_name = {}

# function to fill dictionary
def make_hurricane_dict_by_name():
  for index in range(len(names)):
    hurricanes_by_name[names[index]] = {"Name": names[index],
    "Month": months[index],
    "Year": years[index],
    "Max Sustained Wind": max_sustained_winds[index],
    "Areas Affected": areas_affected[index],
    "Damage": damages_float[index],
    "Death": deaths[index]
    }    
  return hurricanes_by_name

# call to function to make dictionary by name
make_hurricane_dict_by_name()

# Using just for test / supress later
# print(hurricanes_by_name.values())


# create empty dictionaries w/ different initial indexes by differn
hurricanes_by_year = {}
hurricanes_by_month = {}

# just empty space to help reading results
print("")
print("")
print("")
print("")
print("")

# function to create dictionary organized by an index
def make_dict_indexed_by(key, dict_name):
  for item in hurricanes_by_name.values():
    dict_name[item.get(key)] = item
  
# call to funtion to make dictionary organized by year
make_dict_indexed_by("Year", hurricanes_by_year)

# print the dictionary
print(hurricanes_by_name)

# variable to store result of function
affected_areas_count = {}
# function to create dict to store area count
def make_affected_areas_count_dict():
  for item in hurricanes_by_name.values():
    for area in item.get("Areas Affected"):
      if affected_areas_count.get(area) == None:
        affected_areas_count[area] = 1
      else:
        affected_areas_count[area] += 1
  return affected_areas_count

# just empty space to help reading results
print("")
print("")
print("")
print("")
print("")

# call function to create dict to store area count
print(make_affected_areas_count_dict())

# variables to store info about areas most frequently affected (Item 6)
times_affected = 0
area_most_affected = ""

# function to find out most affected areas
def find_most_affected_areas():
  temp_times_affected = 0
  temp_area_most_affected = ""
  for item in affected_areas_count.keys():
    if affected_areas_count.get(item) > temp_times_affected:
      temp_times_affected = affected_areas_count.get(item)
      temp_area_most_affected = item
  return temp_area_most_affected

# call to function 


print("")
print("ITEM 6")
print("Area most affected:")
print(find_most_affected_areas())
print("Times affected:")
print(affected_areas_count.get(find_most_affected_areas()))



# test function by updating damages


# 2 
# Create a Table

# Create and view the hurricanes dictionary

# 3
# Organizing by Year

# create a new dictionary of hurricanes with year and key


# 4
# Counting Damaged Areas

# create dictionary of areas to store the number of hurricanes involved in


# 5 
# Calculating Maximum Hurricane Count

# find most frequently affected area and the number of hurricanes involved in


# 6
# Calculating the Deadliest Hurricane

# find highest mortality hurricane and the number of deaths

# 7
# Rating Hurricanes by Mortality


def find_most_deadly_hurricane():
  most_deadly = ""
  deaths = 0
  for item in hurricanes_by_name.values():
    if item.get("Death") > deaths:
      deaths = item.get("Death")
      most_deadly = item.get("Name")
  return most_deadly

print("")
print("ITEM 7")
print("Most deadly hurricane:")
print(find_most_deadly_hurricane())


# 8 Calculating Hurricane Maximum Damage

# Store the hurricanes in a new dictionary
# where the keys are mortality ratings
# and the values are lists containing a
# dictionary for each hurricane that falls into that
# mortality rating.

hurricanes_by_mortality_rate = {
  0: [],
  1: [],
  2: [],
  3: [],
  4: [],
  5: []
}


def classify_by_mortality():
  mort_scale_0 = []
  mort_scale_1 = []
  mort_scale_2 = []
  mort_scale_3 = []
  mort_scale_4 = []
  mort_scale_5 = []
  for item in hurricanes_by_name.values():
    name = item.get("Name")
    death_count = item.get("Death")
    if death_count == 0:
      mort_scale_0.append(name)
    elif death_count <= 100:
      mort_scale_1.append(name)
    elif death_count <= 500:
      mort_scale_2.append(name)
    elif death_count <= 1000:
      mort_scale_3.append(name)
    elif death_count <= 10000:
      mort_scale_4.append(name)
    else:
      mort_scale_5.append(name)
  hurricanes_by_mortality_rate[0] = mort_scale_0
  hurricanes_by_mortality_rate[1] = mort_scale_1
  hurricanes_by_mortality_rate[2] = mort_scale_2
  hurricanes_by_mortality_rate[3] = mort_scale_3
  hurricanes_by_mortality_rate[4] = mort_scale_4
  hurricanes_by_mortality_rate[5] = mort_scale_5

  return hurricanes_by_mortality_rate


print("")
print("ITEM 8")
print("Classification by Mortality Rate:")

print(classify_by_mortality())
# find highest damage inducing hurricane and its total cost

# 9
# Finding the hurricane that caused the greates damage

def find_most_damaging_hurricane():
  most_damaging = ""
  damage = 0
  for item in hurricanes_by_name.values():
    if item.get("Damage") != 'Damages not recorded' and item.get("Damage") > damage:
      damage = item.get("Damage")
      most_damaging = item.get("Name")
  return most_damaging

print("")
print("ITEM (9)")
print("Most damaging hurricane:")
print(find_most_damaging_hurricane())



# 10
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}



hurricanes_by_damage_rating = {
  0: [],
  1: [],
  2: [],
  3: [],
  4: [],
  5: [],
  "Not Recorded": []
}


def classify_by_damage():
  damage_scale_0 = []
  damage_scale_1 = []
  damage_scale_2 = []
  damage_scale_3 = []
  damage_scale_4 = []
  damage_scale_5 = []
  damage_not_recorded = []
  for item in hurricanes_by_name.values():
    name = item.get("Name")
    damage = item.get("Damage")
    if damage == "Damages not recorded":
      damage_not_recorded.append(name)
    elif damage == 0:
      damage_scale_0.append(name)
    elif damage <= 100000000:
      damage_scale_1.append(name)
    elif damage <= 1000000000:
      damage_scale_2.append(name)
    elif damage <= 10000000000:
      damage_scale_3.append(name)
    elif damage <= 50000000000:
      damage_scale_4.append(name)
    else:
      damage_scale_5.append(name)
  hurricanes_by_damage_rating[0] = damage_scale_0
  hurricanes_by_damage_rating[1] = damage_scale_1
  hurricanes_by_damage_rating[2] = damage_scale_2
  hurricanes_by_damage_rating[3] = damage_scale_3
  hurricanes_by_damage_rating[4] = damage_scale_4
  hurricanes_by_damage_rating[5] = damage_scale_5
  hurricanes_by_damage_rating["Not Recorded"] = damage_not_recorded

  return hurricanes_by_damage_rating


print("")
print("ITEM 10")
print("Classification by Damage Rating:")

print(classify_by_damage())



  
# categorize hurricanes in new dictionary with damage severity as key
